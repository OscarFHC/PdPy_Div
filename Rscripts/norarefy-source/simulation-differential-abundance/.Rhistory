library("edgeR")
?DGEList
?==
?"=="
library("phyloseq"); packageVersion("phyloseq")
library("edgeR"); packageVersion("edgeR")
?calcNormFactors
?edgeR
data("GlobalPatterns")
#' Convert phyloseq OTU count data into DGEList for edgeR package
phyloseq_to_edgeR = function(physeq, group, method="RLE", ...){
require("edgeR")
require("phyloseq")
# Enforce orientation.
if( !taxa_are_rows(physeq) ){ physeq <- t(physeq) }
x = as(otu_table(physeq), "matrix")
# Add one to protect against overflow, log(0) issues.
x = x + 1
# Check `group` argument
if( identical(all.equal(length(group), 1), TRUE) & nsamples(physeq) > 1 ){
# Assume that group was a sample variable name (must be categorical)
group = get_variable(physeq, group)
}
# Now turn into a DGEList
y = DGEList(counts=x, group=group, remove.zeros=TRUE, ...)
# Calculate the normalization factors
z = calcNormFactors(y, method=method)
# Check for division by zero inside `calcNormFactors`
if( !all(is.finite(z$samples$norm.factors)) ){
stop("Something wrong with edgeR::calcNormFactors on this data,
non-finite $norm.factors, consider changing `method` argument")
}
# Estimate dispersions
return(estimateTagwiseDisp(estimateCommonDisp(z)))
}
GP = prune_taxa(names(sort(taxa_sums(GlobalPatterns), decreasing=TRUE)[1:500]), GlobalPatterns)
gpdge = phyloseq_to_edgeR(GlobalPatterns)
sample_variables(GP)
get_variable(GP, "SampleType")
?exactTest
?topTags
gpdge
gpdge = phyloseq_to_edgeR(GlobalPatterns, group="SampleType")
?GlobalPatterns
data("GlobalPatterns")
GP = prune_taxa(names(sort(taxa_sums(GlobalPatterns), decreasing=TRUE)[1:500]), GlobalPatterns)
sample_data(GP)$human <- ifelse(get_variable(GP, "SampleType") %in% c("Feces", "Mock", "Skin", "Tongue"), "human-assoc", "non-human")
sample_data(GP)$human
gpdge = phyloseq_to_edgeR(GlobalPatterns, group="human")
gpdge = phyloseq_to_edgeR(GP, group="human")
gpdge = phyloseq_to_edgeR(GP, group="human")
gpdge
et = exactTest(gpdge)
tt = topTags(et, n=nrow(gpdge$table), adjust.method="BH", sort.by="PValue")
res = tt@.Data[[1]]
res
colnames(res)
res[, "FDR"]
?phyloseq
filepath = system.file("extdata", "study_1457_split_library_seqs_and_mapping.zip",
package = "phyloseq")
kostic = microbio_me_qiime(filepath)
get_variable(kostic, "DIAGNOSIS")
which(get_variable(kostic, "DIAGNOSIS") == "None")
kosticB = subset_samples(kostic, DIAGNOSIS != "None")
get_variable(kosticB, "DIAGNOSIS")
dge = phyloseq_to_edgeR(kosticB, group="DIAGNOSIS")
# Perform binary test
et = exactTest(dge)
tt = topTags(et, n=nrow(gpdge$table), adjust.method="BH", sort.by="PValue")
res = tt@.Data[[1]]
res[, "FDR"]
res = tt@.Data[[1]]
alpha = 0.01
sigtab = res[(res$FDR < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(kostic)[rownames(sigtab), ], "matrix"))
rownames(sigtab)
head(sigtab)
library("ggplot2")
theme_set(theme_bw())
scale_fill_discrete <- function(palname = "Set1", ...) {
scale_fill_brewer(palette = palname, ...)
}
sigtabgen = subset(sigtab, !is.na(Genus))
# Phylum order
x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))
x = sort(x, TRUE)
sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))
# Genus order
x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))
x = sort(x, TRUE)
sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))
ggplot(sigtabgen, aes(x = Genus, y = log2FoldChange, fill = Phylum)) + geom_bar(stat = "identity",
position = "dodge", color = "black") + theme(axis.text.x = element_text(angle = -90,
hjust = 0, vjust = 0.5))
library("ggplot2")
theme_set(theme_bw())
scale_fill_discrete <- function(palname = "Set1", ...) {
scale_fill_brewer(palette = palname, ...)
}
sigtabgen = subset(sigtab, !is.na(Genus))
# Phylum order
x = tapply(sigtabgen$logFC, sigtabgen$Phylum, function(x) max(x))
x = sort(x, TRUE)
sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))
# Genus order
x = tapply(sigtabgen$logFC, sigtabgen$Genus, function(x) max(x))
x = sort(x, TRUE)
sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))
ggplot(sigtabgen, aes(x = Genus, y = logFC, fill = Phylum)) + geom_bar(stat = "identity",
position = "dodge", color = "black") + theme(axis.text.x = element_text(angle = -90,
hjust = 0, vjust = 0.5))
?geom_bar
ggplot(sigtabgen, aes(x = Genus, y = logFC, color = Phylum)) + geom_point(size=6) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))
getwd()
